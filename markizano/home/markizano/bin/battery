#!/usr/bin/perl

use strict;
use warnings;
use Carp;
use Data::Dumper;

use File::Basename 'basename';
use File::Touch;

use Getopt::Long;
use Storable;

our ($app_name);
use Gtk2::Notify qw/-init app_name/;

use constant POWER_ONLINE => '/sys/class/power_supply/ADP0/online';
use constant BATTERY_ENERGY_FULL_DESIGN => '/sys/class/power_supply/BAT0/energy_full_design';
use constant BATTERY_ENERGY_FULL => '/sys/class/power_supply/BAT0/energy_full';
use constant BATTERY_ENERGY_NOW => '/sys/class/power_supply/BAT0/energy_now';

my ( $SELF, $help, $cron, $info );

$SELF = basename $0;
$app_name = $SELF;
GetOptions(
    help => \$help,
    cron => \$cron,
    info => \$info,
);

die <<HELP if $help or ($ARGV[0] && $ARGV[0] eq '-h');
Usage: $SELF [--help|--cron|--info]
    --help
        Display this help context

    --cron
        Runs the crontab sequence:
            - Check the battery state.
            - At certain intervals - send libnotify messages.
            - When power is fatally low, go into hibernation.

    --info
        Get info about:
            - Current plug state.
            - Current battery usage (%).
            - Current battery degredation (%).

HELP

# Are we using the power supply? Are we plugged in?
sub on_power {
	my ( $fh, $res );
	open $fh, '<', POWER_ONLINE;
	$res = <$fh>;
	chomp $res;
	close $fh;
	return $res ? 1: 0;
}

# Gets us the batter's design for maximum power, helping us determine how far the battery has degraded.
sub energy_full_design { # @implements Caching.
	my ( $fh, $res );

	unless ( exists $ENV{ ENERGY_FULL_DESIGN } ) {
	    open $fh, '<', BATTERY_ENERGY_FULL_DESIGN;
	    $ENV{ ENERGY_FULL_DESIGN } = <$fh>;
	    chomp $ENV{ ENERGY_FULL_DESIGN };
	    close $fh;
    }

	return $ENV{ ENERGY_FULL_DESIGN };
}

# Gets the full battery cell count.
sub energy_full {
	my ( $fh, $res );
	open $fh, '<', BATTERY_ENERGY_FULL;
	$res = <$fh>;
	chomp $res;
	close $fh;
	return $res;
}

# Returns the number of cells we have left before we have a dead battery on our hands.
sub energy_now {
	my ( $fh, $res );
	open $fh, '<', BATTERY_ENERGY_NOW;
	$res = <$fh>;
	chomp $res;
	close $fh;
	return $res;
}

# ...

if ( $cron && !on_power ) {
    # Check the battery
    # If we are low on fuel, send libnoitfy periodically.
    # When we are low, go into hibernation.
    my ( %cache, $i, $fh, $mark, $text, $pid );
    %cache = %{ retrieve('/tmp/.power-manager.cache') } if ( -e '/tmp/.power-manager.cache' );
    foreach $i ( qw/75 50 33 25 15/ ) {
        if ( ( energy_now() * 100 / energy_full() ) <= $i && !exists $cache{ "notif$i" } ) {
            $cache{ "notif$i" } = 1;
            Gtk2::Notify->new('Power Manager', "Power declines $i\%.", 'battery')->show;
        }
    }

    if ( ( energy_now() / energy_full() ) <= 0.10 && !exists $cache{ notif10 } ) {
        $cache{ notif10 } = 1;
        `zenity --warning --text="Your battery power is extremely low! (Less than 10%)"`;
    }

    if ( ( energy_now() / energy_full() ) <= 0.05 && !exists $cache{ notif05 } ) {
        touch "/tmp/.power.lock";
        $cache{ notif05 } = 1;
        $mark = time;
        $text = "Your battery is about to die! (Less than 5%)\nYou have 300 seconds (5 minutes) to acknowledge this message or plugin zynx.";
        $pid = open $fh, '-|', "zenity", "--warning", "--text", $text;

        while ( !on_power() && ( -e "/tmp/.power.lock") ) {
            if ( time > $mark + 300 ) {
                $cache{ hibernate } = 1;
                last;
            }

            sleep 1;
        }

        close $fh; kill 2, $pid;
        if ( exists $cache{ hibernate } && $cache{ hibernate } ) {
            #`/usr/sbin/hibernate`;
        }
    }

    store(\%cache, '/tmp/.power-manager.cache');
}

if ( $info ) {
    # Print:
    # - Whether we are plugged in.
    # - Current power usage.
    # - How much the battery has degraded.
    printf(
        "AC: \%s\nBattery: \%0.02f\%\%\nDegredation: \%0.02f\%\%\n",
        ( on_power() ? "On": "Off" ),
        ( energy_now() * 100 / energy_full() ),
        ( energy_full() * 100 / energy_full() ),
    );
}
