#!/bin/bash

set -e
# This attempts to bridge ethernet ports to a wifi adapter to provide internet like a router.
# Useful in virtualization, or routing internet to XBOX :D

# The adapter we will use for the bridge connection.
BR0=br0

# The source of a wifi connection where we will be bridging the connection.
#   Assume wifi is the source of inet, we need to bridge eth0, eth1, etc
#   to the wifi connection so they have their own addresses.
WLAN0=usb0

# List the eth* adapters here. A loop will pass over each one listed to give them
# embedded mappings.
AUTO=eth0

# The adapter to the ethernet port(s) we will be connecting.
ETH0=eth0
#ETH1=eth1

BR0_MAC="$(</sys/class/net/$BR0/address)"
BR0_IP="$(getifaddr $BR0)"

ETH0_MAC="$(</sys/class/net/$ETH0/address)"
ETH0_IP="$(getifaddr $ETH0)"

WLAN0_MAC="$(</sys/class/net/$WLAN0/address)"
WLAN0_IP="$(getifaddr $WLAN0)"

function check_bridge () {
    if [ ! -L /sys/class/net/$BR0 ]; then
        brctl addbr $BR0
        BR0_MAC="$(</sys/class/net/$BR0/address)"
        BR0_IP="$(getifaddr $BR0)"
    fi

    for iface in $WLAN0 $AUTO; do
        brctl addif $BR0 $iface;
    done
}

function setup_ebtables () {
    ebtables -t nat -A POSTROUTING -o $WLAN0 -j snat --to-src "$WLAN0_MAC" --snat-arp --snat-target ACCEPT
    for eth in $AUTH; do
        IP="${eth^^}_IP"
        MAC="${eth^^}_MAC"
        ebtables -t nat -A PREROUTING -p IPv4 -i $WLAN0 --ip-dst "${IP}" -j dnat --to-dst "${MAC}" --dnat-target ACCEPT
        ebtables -t nat -A PREROUTING -p ARP -i $WLAN0 --arp-ip-dst "${IP}" -j dnat --to-dst "${MAC}" --dnat-target ACCEPT
    done
}


